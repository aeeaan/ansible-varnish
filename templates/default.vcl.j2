# {{ ansible_managed }}
#
# This is an example VCL file for Varnish.
#
# It does not do anything by default, delegating control to the
# builtin VCL. The builtin VCL is called when there is no explicit
# return statement.
#
# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and https://www.varnish-cache.org/trac/wiki/VCLExamples for more examples.

# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.0 format.
vcl 4.0;
import std;

{% if varnish_vcl_certbot is defined and varnish_vcl_certbot %}
include "/etc/varnish/certbot.vcl";
{% endif %}

# Default backend definition. Set this to point to your content server.
backend default {
    .host = "{{ varnish_backend_host }}";
    .port = "{{ varnish_backend_port }}";
}

sub vcl_recv {
    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.
 
    # set x-forwarded-proto header to https if connections comes from Hitch SSL Proxy.
    if (std.port(local.ip) == 6086) {
        set req.http.X-Forwarded-Proto = "https";
    }
}

sub vcl_backend_response {
    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
    {% if varnish_https_strict_header %}
    set resp.http.Strict-Transport-Security = "{{ varnish_https_strict_header }}";
    {% endif %}
}

sub vcl_hash {
    # Cache https seperately
    if (std.port(local.ip) != 80) {
        if (req.http.X-Forwarded-Proto) {
            hash_data(req.http.X-Forwarded-Proto);
        }
    }
}

{% for item in varnish_vcl_includes %}
include "vcl/{{ item }}";
{% endfor %}
